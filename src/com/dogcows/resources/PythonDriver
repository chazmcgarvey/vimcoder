import $CLASSNAME$
import sys
import time

def execTest(methodParams, expected):
	obj = $CLASSNAME$.$CLASSNAME$()
	actual = eval('obj.$METHODNAME$(' + methodParams + ')')
	return (actual, expected)

print("TAP version 13")

passCount=0
failCount=0
abortOnFail=False
if len(sys.argv) > 1:
	abortOnFail=True

with open("testcases.txt") as f:
	lines = f.readlines()
	i = 0
	while True:
		testnum = passCount + failCount + 1
		expected = eval(lines[i])
		i += 1

		methodParamVals = []
		for p in range(0, $METHODPARAMCOUNT$):
			methodParamVals.append(eval(lines[i].strip()))
			i += 1

		methodParamStr = ','.join(map(str, methodParamVals))
		print("# input for test " + str(testnum) + ": " + methodParamStr)

		elapsed = 0
		try:
			start = time.time()
			(actual, expected) = execTest(methodParamStr, expected)
			end = time.time()
			elapsed = end - start
		except Exception:
			print("Exception thrown on parameters " + methodParamStr + ": ")
			traceback.print_exc()
			failCount += 1
			continue

		print("# test completed in " + str(elapsed) + " ms")
		if actual == expected:
			print("ok")
			passCount += 1
		else:
			print("not ok")
			failCount += 1

		print(str(actual) + " must equal " + str(expected))

		if abortOnFail and failCount > 0:
			exit()

		if i == len(lines):
			break
	
print("1.." + str(passCount + failCount))
print("# passed: " + str(passCount))
print("# failed: " + str(failCount))

if failCount == 0:
	print("# Nice! Don't forget to compile remotely before submitting.")

exit(failCount)	

